### 正規表現と組み合わせると便利なStringクラスのメソッド ###

# scan :正規表現にマッチする部分を配列に入れて返す
p '123 456 789'.scan(/\d+/)
#  => ["123", "456", "789"]

## () でキャプチャ
p '1977年7月17日 2016年12月31日'.scan(/(\d+)年(\d+)月(\d+)日/)
#  => [["1977", "7", "17"], ["2016", "12", "31"]]

## グループ化するが、キャプチャはしない
p '1977年7月17日 2016年12月31日'.scan(/(?:\d+)年(?:\d+)月(?:\d+)日/)
#  => ["1977年7月17日", "2016年12月31日"]
p '1977年7月17日 2016年12月31日'.scan(/\d+年\d+月\d+日/)
#  => ["1977年7月17日", "2016年12月31日"]


# [] / slice / slice! :正規表現にマッチした部分を抜き出す
text = '郵便番号は123-4567です'
p text[/\d{3}-\d{4}/]  #=> "123-4567"

## マッチ箇所が複数ある場合は、最初のマッチ文字列が返る
text = '123-4567 456-7890'
p text[/\d{3}-\d{4}/]  #=> "123-4567"

## 第2引数で取得するキャプチャを指定
text = '誕生日は1977年7月17日です'
p text[/(\d+)年(\d+)月(\d+)日/]  #=> "1977年7月17日"
p text[/(\d+)年(\d+)月(\d+)日/, 2]  #=> "7"
p text[/(?<year>\d+)年(?<month>\d+)月(?<day>\d+)日/, :year]  #=> "1977"
p text[/(?<year>\d+)年(?<month>\d+)月(?<day>\d+)日/, 'month']  #=> "7"

## slice! はマッチ文字列を破壊的に取り除く
text = '郵便番号は123-4567です'
text.slice!(/\d{3}-\d{4}/)
p text  #=> "郵便番号はです"


# split :正規表現にマッチする文字列で文字列を分割する
text = '123,456-789'
p text.split(/,/)  #=> ["123", "456-789"]
p text.split(/,|-/)  #=> ["123", "456", "789"]


# gsub / gsub! :マッチ部分を指定文字列で置換する
text = '123,456-789'
p text.gsub(',', ':')  #=> "123:456-789"
p text.gsub(/,|-/, ':')  #=> "123:456:789"

## キャプチャを使う
text = '誕生日は1977年7月17日です'
p text.gsub(/(\d+)年(\d+)月(\d+)日/, '\1-\2-\3')  #=> "誕生日は1977-7-17です"

## 名前付きキャプチャを使う
text = '誕生日は1977年7月17日です'
p text.gsub(/(?<year>\d+)年(?<month>\d+)月(?<day>\d+)日/, '\k<year>-\k<month>-\k<day>')
#  => "誕生日は1977-7-17です"

## 置換ルールをハッシュで渡す
text = '123,456-789'
hash = { ',' => ':', '-' => '/' }
p text.gsub(/,|-/, hash)  #=> "123:456/789"

## 置換ルールをブロックで指定
text = '123,456-789'
p text.gsub(/,|-/) { |matched| matched == ',' ? ':' : '/' }  #=> "123:456/789"

## gsub! はマッチ文字列を破壊的に置換
text = '123,456-789'
text.gsub!(/,|-/, ':')
p text  #=> "123:456:789"
